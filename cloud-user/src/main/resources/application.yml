server:
    port: 8005
eureka:
  client:
    serviceUrl:
      defaultZone: http://106.14.116.177:8001/eureka/
  instance:
      leaseRenewalIntervalInSeconds: 13333323
      leaseExpirationDurationInSeconds: 2
      hostname: ${spring.cloud.client.ip-address}
      instance-id: ${spring.cloud.client.ip-address}:${server.port}
      prefer-ip-address: true
      status-page-url: http://${spring.cloud.client.ip-address}:${server.port}/swagger-ui.html # ${server.port}为该服务的端口号
#security:
#  basic:
#    enabled: false

#spring
spring:
  devtools:
    restart:
      enabled: true
      additional-paths: src/main/java
  application:
    name: user-service
  datasource:
    druid:
      db-type: com.alibaba.druid.pool.DruidDataSource
      driver-class-name: com.mysql.jdbc.Driver
      url: jdbc:mysql://106.14.116.177:3306/clouddo?autoReconnect=true&useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8
      username: root
      password: 123456
      # 下面为连接池的补充设置，应用到上面所有数据源中
      # 初始化大小，最小，最大
      initial-size: 2
      min-idle: 2
      max-active: 20
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 30000
      # 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filter.commons-log.connection-logger-name: stat,wall,log4j
      filter.stat.log-slow-sql: true
      filter.stat.slow-sql-millis: 2000
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      use-global-data-source-stat: true
      filter:
        stat:
          enabled: true
          slow-sql-millis: 5000
     # 合并多个DruidDataSource的监控数据
  redis:
    host: 106.14.116.177
    port: 6379
    #password: root
fastdfs:
   tracker-servers: 192.168.2.20
   charset: UTF-8
   connectTimeout: 30
   networkTimeout: 30
   httpAntiStealToken: false
  # httpSecretKey: 123456
   httpTrackerHttpPort: 80
   port: 22122



#mybatis
mybatis-plus:
  mapper-locations: classpath:/mapper/*Mapper.xml
  #实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: com.ocean.clouduser.entity
  global-config:
    #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
    id-type: 3
    #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
    field-strategy: 2
    #驼峰下划线转换
    db-column-underline: true
    #刷新mapper 调试神器
    refresh-mapper: true
    #数据库大写下划线转换
    capital-mode: true
    #序列接口实现类配置
    #key-generator: com.baomidou.springboot.xxx
    #逻辑删除配置
    #logic-delete-value: 0
    #logic-not-delete-value: 1
    #自定义填充策略接口实现
    #meta-object-handler: com.baomidou.springboot.xxx
    #自定义SQL注入器
    #sql-injector: com.baomidou.springboot.xxx
    enable-sql-runner: true
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
security:
  oauth2:
    resource:
      user-info-uri: http://localhost:8090/users/current #获取当前Token的用户信息
    client:
      clientId: cloud
      clientSecret: cloud
      accessTokenUri: http://localhost:8090/oauth/token #获取Token
      grant-type: password
      scope: server
hystrix:
  command:
    default:
      execution:
        isolation:
          strategy: SEMAPHORE
